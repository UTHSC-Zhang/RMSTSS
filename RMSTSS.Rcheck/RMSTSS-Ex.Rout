
R version 4.4.0 (2024-04-24 ucrt) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "RMSTSS"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "RMSTSS-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('RMSTSS')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("DC.power.analytical")
> ### * DC.power.analytical
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DC.power.analytical
> ### Title: Analyze Power for RMST Model with Dependent Censoring (Analytic)
> ### Aliases: DC.power.analytical
> 
> ### ** Examples
> 
> # Generate sample pilot data
> set.seed(123)
> n_pilot <- 150
> pilot_df <- data.frame(
+   time = rexp(n_pilot, rate = 0.1),
+   arm = rep(0:1, each = n_pilot / 2),
+   age = rnorm(n_pilot, mean = 60, sd = 10)
+ )
> # Introduce a treatment effect
> pilot_df$time[pilot_df$arm == 1] <- pilot_df$time[pilot_df$arm == 1] * 1.2
> 
> # Create competing event indicators
> # Assume 70% primary event, 15% dependent censoring, 15% independent censoring
> event_type <- sample(0:2, n_pilot, replace = TRUE, prob = c(0.7, 0.15, 0.15))
> pilot_df$status <- ifelse(event_type == 0, 1, 0)
> pilot_df$dep_cens_status <- ifelse(event_type == 1, 1, 0)
> pilot_df$time[event_type != 0] <- pilot_df$time[event_type != 0] * 0.8
> 
> # Run the power analysis
> dc_power_results <- DC.power.analytical(
+   pilot_data = pilot_df,
+   time_var = "time",
+   status_var = "status",
+   arm_var = "arm",
+   dep_cens_status_var = "dep_cens_status",
+   sample_sizes = c(200, 300, 400),
+   linear_terms = "age",
+   L = 20,
+   alpha = 0.05
+ )
--- Estimating parameters from pilot data... ---
Model: Y_rmst ~ arm + age
--- Calculating asymptotic variance... ---
--- Calculating power for specified sample sizes... ---
> print(dc_power_results$results_data)
  N_per_Arm     Power
1       200 0.7353163
2       300 0.8870182
3       400 0.9555608
> print(dc_power_results$results_plot)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("DC.power.analytical", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("DC.ss.analytical")
> ### * DC.ss.analytical
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DC.ss.analytical
> ### Title: Find Sample Size for RMST Model with Dependent Censoring
> ###   (Analytic)
> ### Aliases: DC.ss.analytical
> 
> ### ** Examples
> 
> # Generate sample pilot data with a clear treatment effect
> set.seed(456)
> n_pilot <- 200
> pilot_df_ss <- data.frame(
+   time = rexp(n_pilot, rate = 0.2),
+   arm = rep(0:1, each = n_pilot / 2),
+   age = rnorm(n_pilot, mean = 55, sd = 8)
+ )
> # Introduce a treatment effect
> pilot_df_ss$time[pilot_df_ss$arm == 1] <- pilot_df_ss$time[pilot_df_ss$arm == 1] * 1.5
> 
> # Create competing event indicators
> event_type <- sample(0:2, n_pilot, replace = TRUE, prob = c(0.6, 0.2, 0.2))
> pilot_df_ss$status <- ifelse(event_type == 0, 1, 0)
> pilot_df_ss$dep_cens_status <- ifelse(event_type == 1, 1, 0)
> pilot_df_ss$time[event_type != 0] <- pilot_df_ss$time[event_type != 0] * 0.7
> 
> # Run the sample size search
> dc_ss_results <- DC.ss.analytical(
+   pilot_data = pilot_df_ss,
+   time_var = "time",
+   status_var = "status",
+   arm_var = "arm",
+   dep_cens_status_var = "dep_cens_status",
+   target_power = 0.80,
+   linear_terms = "age",
+   L = 15,
+   alpha = 0.05,
+   n_start = 100,
+   n_step = 50
+ )
--- Estimating parameters from pilot data for analytic calculation... ---
Model: Y_rmst ~ arm + age
--- Searching for Sample Size (Method: Analytic) ---
  N = 100/arm, Calculated Power = 0.998

--- Calculation Summary ---


Table: Required Sample Size

| Target_Power| Required_N_per_Arm|
|------------:|------------------:|
|          0.8|                100|
> print(dc_ss_results$results_data)
  Target_Power Required_N_per_Arm
1          0.8                100
> print(dc_ss_results$results_plot)
`geom_line()`: Each group consists of only one observation.
â„¹ Do you need to adjust the group aesthetic?
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("DC.ss.analytical", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("GAM.power.boot")
> ### * GAM.power.boot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: GAM.power.boot
> ### Title: Calculate Power for a Semiparametric Additive RMST Model via
> ###   Simulation
> ### Aliases: GAM.power.boot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D pilot_df <- data.frame(
> ##D   time = rexp(100, 0.08),
> ##D   status = rbinom(100, 1, 0.7),
> ##D   arm = rep(0:1, each = 50),
> ##D   age = rnorm(100, 60, 10)
> ##D )
> ##D # Add a treatment effect
> ##D pilot_df$time[pilot_df$arm == 1] <- pilot_df$time[pilot_df$arm == 1] * 1.3
> ##D 
> ##D power_results <- GAM.power.boot(
> ##D   pilot_data = pilot_df,
> ##D   time_var = "time",
> ##D   status_var = "status",
> ##D   arm_var = "arm",
> ##D   sample_sizes = c(100, 150),
> ##D   linear_terms = "age",
> ##D   L = 15,
> ##D   n_sim = 100, # Use more sims in practice, e.g., 1000
> ##D   parallel.cores = 2
> ##D )
> ##D print(power_results$results_data)
> ##D print(power_results$results_plot)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("GAM.power.boot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("GAM.ss.boot")
> ### * GAM.ss.boot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: GAM.ss.boot
> ### Title: Find Sample Size for a Semiparametric Additive RMST Model via
> ###   Simulation
> ### Aliases: GAM.ss.boot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D pilot_df_effect <- data.frame(
> ##D   time = c(stats::rexp(50, 0.1), stats::rexp(50, 0.04)), # Effect
> ##D   status = stats::rbinom(100, 1, 0.9),
> ##D   arm = rep(0:1, each = 50)
> ##D )
> ##D 
> ##D ss_results <- GAM.ss.boot(
> ##D   pilot_data = pilot_df_effect,
> ##D   time_var = "time",
> ##D   status_var = "status",
> ##D   arm_var = "arm",
> ##D   target_power = 0.80,
> ##D   L = 15,
> ##D   n_sim = 100,      # Low n_sim for example
> ##D   n_start = 100,
> ##D   n_step = 50,
> ##D   patience = 2,
> ##D   parallel.cores = 2
> ##D )
> ##D print(ss_results$results_data)
> ##D print(ss_results$results_plot)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("GAM.ss.boot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("MS.power.analytical")
> ### * MS.power.analytical
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: MS.power.analytical
> ### Title: Analyze Power for a Multiplicative Stratified RMST Model
> ###   (Analytic)
> ### Aliases: MS.power.analytical
> 
> ### ** Examples
> 
> set.seed(123)
> pilot_df_strat <- data.frame(
+  time = rexp(120, 0.15),
+  status = rbinom(120, 1, 0.6),
+  arm = rep(0:1, each = 60),
+  region = factor(rep(c("A", "B", "C"), each = 40))
+ )
> pilot_df_strat$time[pilot_df_strat$arm == 1] <- pilot_df_strat$time[pilot_df_strat$arm == 1] * 1.5
> 
> power_results <- MS.power.analytical(
+  pilot_data = pilot_df_strat,
+  time_var = "time", status_var = "status", arm_var = "arm", strata_var = "region",
+  sample_sizes = c(50, 75, 100),
+  L = 10, alpha = 0.05
+ )
--- Estimating parameters from pilot data (log-linear approximation)... ---
Approximation Model: log(Y_rmst) ~ arm + region
--- Calculating power for specified sample sizes... ---
> print(power_results$results_data)
  N_per_Stratum     Power
1            50 0.4415527
2            75 0.6027274
3           100 0.7270471
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("MS.power.analytical", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("MS.power.boot")
> ### * MS.power.boot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: MS.power.boot
> ### Title: Analyze Power for a Multiplicative Stratified RMST Model via
> ###   Simulation
> ### Aliases: MS.power.boot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D pilot_df_strat <- data.frame(
> ##D  time = rexp(120, 0.15),
> ##D  status = rbinom(120, 1, 0.6),
> ##D  arm = rep(0:1, each = 60),
> ##D  region = factor(rep(c("A", "B", "C"), each = 40))
> ##D )
> ##D pilot_df_strat$time[pilot_df_strat$arm == 1] <- pilot_df_strat$time[pilot_df_strat$arm == 1] * 1.4
> ##D 
> ##D power_results <- MS.power.boot(
> ##D  pilot_data = pilot_df_strat,
> ##D  time_var = "time", status_var = "status", arm_var = "arm", strata_var = "region",
> ##D  sample_sizes = c(50, 75),
> ##D  L = 10,
> ##D  n_sim = 100 # Low n_sim for example
> ##D )
> ##D print(power_results$results_data)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("MS.power.boot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("MS.ss.analytical")
> ### * MS.ss.analytical
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: MS.ss.analytical
> ### Title: Find Sample Size for a Multiplicative Stratified RMST Model
> ###   (Analytic)
> ### Aliases: MS.ss.analytical
> 
> ### ** Examples
> 
> set.seed(456)
> pilot_df_strat_effect <- data.frame(
+  time = c(rexp(60, 0.15), rexp(60, 0.08)), # Effect
+  status = rbinom(120, 1, 0.7),
+  arm = rep(0:1, each = 60),
+  region = factor(rep(c("A", "B"), each = 60))
+ )
> 
> ss_results <- MS.ss.analytical(
+  pilot_data = pilot_df_strat_effect,
+  time_var = "time", status_var = "status", arm_var = "arm", strata_var = "region",
+  target_power = 0.80, L = 10,
+  n_start = 100, n_step = 50
+ )
--- Estimating parameters from pilot data (log-linear approximation)... ---
--- Searching for Sample Size (Method: Analytic/Approximation) ---
  N = 100/stratum, Calculated Power = 1

--- Calculation Summary ---


Table: Required Sample Size

| Target_Power| Required_N_per_Stratum|
|------------:|----------------------:|
|          0.8|                    100|
> print(ss_results$results_data)
  Target_Power Required_N_per_Stratum
1          0.8                    100
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("MS.ss.analytical", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("MS.ss.boot")
> ### * MS.ss.boot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: MS.ss.boot
> ### Title: Estimate Sample Size for a Multiplicative Stratified RMST Model
> ###   via Simulation
> ### Aliases: MS.ss.boot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D pilot_df_strat_effect <- data.frame(
> ##D  time = c(rexp(60, 0.15), rexp(60, 0.08)), # Effect
> ##D  status = rbinom(120, 1, 0.7),
> ##D  arm = rep(0:1, each = 60),
> ##D  region = factor(rep(c("A", "B", "C"), each = 40))
> ##D )
> ##D ss_results <- MS.ss.boot(
> ##D  pilot_data = pilot_df_strat_effect,
> ##D  time_var = "time", status_var = "status", arm_var = "arm", strata_var = "region",
> ##D  target_power = 0.80, L = 10,
> ##D  n_sim = 100, # Low n_sim for example
> ##D  n_start = 100,
> ##D  n_step = 50, patience = 2
> ##D )
> ##D print(ss_results$results_data)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("MS.ss.boot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("additive.power.analytical")
> ### * additive.power.analytical
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: additive.power.analytical
> ### Title: Analyze Power for a Stratified Additive RMST Model (Analytic)
> ### Aliases: additive.power.analytical
> 
> ### ** Examples
> 
> set.seed(123)
> pilot_df_strat <- data.frame(
+  time = rexp(150, 0.1),
+  status = rbinom(150, 1, 0.8),
+  arm = rep(0:1, each = 75),
+  region = factor(rep(c("A", "B", "C"), each = 50)),
+  age = rnorm(150, 60, 10)
+ )
> # Introduce an additive treatment effect
> pilot_df_strat$time[pilot_df_strat$arm == 1] <-
+   pilot_df_strat$time[pilot_df_strat$arm == 1] + 1.5
> 
> power_results <- additive.power.analytical(
+   pilot_data = pilot_df_strat,
+   time_var = "time", status_var = "status", arm_var = "arm", strata_var = "region",
+   sample_sizes = c(100, 150, 200),
+   linear_terms = "age",
+   L = 12
+ )
--- Estimating parameters from pilot data... ---
--- Estimating additive effect via stratum-centering... ---
--- Calculating asymptotic variance... ---
--- Calculating power for specified sample sizes... ---
> print(power_results$results_data)
  N_per_Stratum     Power
1           100 0.2629389
2           150 0.3682932
3           200 0.4660482
> print(power_results$results_plot)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("additive.power.analytical", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("additive.ss.analytical")
> ### * additive.ss.analytical
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: additive.ss.analytical
> ### Title: Find Sample Size for a Stratified Additive RMST Model (Analytic)
> ### Aliases: additive.ss.analytical
> 
> ### ** Examples
> 
> set.seed(123)
> pilot_df_strat <- data.frame(
+  time = rexp(150, 0.1),
+  status = rbinom(150, 1, 0.8),
+  arm = rep(0:1, each = 75),
+  region = factor(rep(c("A", "B", "C"), each = 50)),
+  age = rnorm(150, 60, 10)
+ )
> # Introduce an additive treatment effect
> pilot_df_strat$time[pilot_df_strat$arm == 1] <-
+   pilot_df_strat$time[pilot_df_strat$arm == 1] + 1.5
> 
>   # Find the required sample size per stratum for 80% power
>   ss_results <- additive.ss.analytical(
+     pilot_data = pilot_df_strat,
+     time_var = "time", status_var = "status",
+     arm_var = "arm", strata_var = "region",
+     target_power = 0.50,
+     L = 18, #
+     n_start = 200,
+     n_step = 50,
+     max_n_per_arm = 1000
+   )
--- Estimating parameters from pilot data for analytic search... ---
--- Searching for Sample Size (Method: Additive Analytic) ---
  N = 200/stratum, Calculated Power = 0.399
  N = 250/stratum, Calculated Power = 0.478
  N = 300/stratum, Calculated Power = 0.55

--- Calculation Summary ---


Table: Required Sample Size

| Target_Power| Required_N_per_Stratum|
|------------:|----------------------:|
|          0.5|                    300|
>   print(ss_results$results_data)
  Target_Power Required_N_per_Stratum
1          0.5                    300
>   print(ss_results$results_plot)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("additive.ss.analytical", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("linear.power.analytical")
> ### * linear.power.analytical
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: linear.power.analytical
> ### Title: Analyze Power for a Linear RMST Model (Analytic)
> ### Aliases: linear.power.analytical
> 
> ### ** Examples
> 
> pilot_df <- data.frame(
+   time = rexp(100, 0.1),
+   status = rbinom(100, 1, 0.7),
+   arm = rep(0:1, each = 50),
+   age = rnorm(100, 55, 10)
+ )
> power_results <- linear.power.analytical(
+   pilot_data = pilot_df,
+   time_var = "time",
+   status_var = "status",
+   arm_var = "arm",
+   linear_terms = "age",
+   sample_sizes = c(100, 200, 300),
+   L = 10
+ )
--- Estimating parameters from pilot data for analytic calculation... ---
Model: Y_rmst ~ factor(arm) + age
--- Calculating asymptotic variance... ---
--- Calculating power for specified sample sizes... ---
> print(power_results$results_data)
  N_per_Arm      Power
1       100 0.05866414
2       200 0.08031771
3       300 0.10066900
> print(power_results$results_plot)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("linear.power.analytical", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("linear.power.boot")
> ### * linear.power.boot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: linear.power.boot
> ### Title: Analyze Power for a Linear RMST Model via Simulation
> ### Aliases: linear.power.boot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D pilot_df <- data.frame(
> ##D   time = rexp(100, 0.1),
> ##D   status = rbinom(100, 1, 0.7),
> ##D   arm = rep(0:1, each = 50),
> ##D   age = rnorm(100, 60, 8)
> ##D )
> ##D # Introduce a treatment effect for a more interesting example
> ##D pilot_df$time[pilot_df$arm == 1] <- pilot_df$time[pilot_df$arm == 1] * 1.5
> ##D 
> ##D power_results <- linear.power.boot(
> ##D   pilot_data = pilot_df,
> ##D   time_var = "time",
> ##D   status_var = "status",
> ##D   arm_var = "arm",
> ##D   linear_terms = "age",
> ##D   sample_sizes = c(100, 150, 200),
> ##D   L = 10,
> ##D   n_sim = 200 # Use more simulations in practice (e.g., 1000)
> ##D )
> ##D print(power_results$results_data)
> ##D print(power_results$results_plot)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("linear.power.boot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("linear.ss.analytical")
> ### * linear.ss.analytical
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: linear.ss.analytical
> ### Title: Find Sample Size for a Linear RMST Model (Analytic)
> ### Aliases: linear.ss.analytical
> 
> ### ** Examples
> 
> pilot_df <- data.frame(
+   time = c(rexp(50, 0.1), rexp(50, 0.07)), # Introduce an effect
+   status = rbinom(100, 1, 0.8),
+   arm = rep(0:1, each = 50),
+   age = rnorm(100, 55, 10)
+ )
> ss_results <- linear.ss.analytical(
+   pilot_data = pilot_df,
+   time_var = "time",
+   status_var = "status",
+   arm_var = "arm",
+   target_power = 0.80,
+   L = 10
+ )
--- Estimating parameters from pilot data for analytic search... ---
Model: Y_rmst ~ factor(arm)
--- Searching for Sample Size (Method: Analytic) ---
  N = 50/arm, Calculated Power = 0.171
  N = 75/arm, Calculated Power = 0.235
  N = 100/arm, Calculated Power = 0.298
  N = 125/arm, Calculated Power = 0.358
  N = 150/arm, Calculated Power = 0.417
  N = 175/arm, Calculated Power = 0.472
  N = 200/arm, Calculated Power = 0.524
  N = 225/arm, Calculated Power = 0.573
  N = 250/arm, Calculated Power = 0.618
  N = 275/arm, Calculated Power = 0.659
  N = 300/arm, Calculated Power = 0.697
  N = 325/arm, Calculated Power = 0.731
  N = 350/arm, Calculated Power = 0.762
  N = 375/arm, Calculated Power = 0.79
  N = 400/arm, Calculated Power = 0.815

--- Calculation Summary ---


Table: Required Sample Size

| Target_Power| Required_N_per_Arm|
|------------:|------------------:|
|          0.8|                400|
> print(ss_results$results_data)
  Target_Power Required_N_per_Arm
1          0.8                400
> print(ss_results$results_plot)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("linear.ss.analytical", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("linear.ss.boot")
> ### * linear.ss.boot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: linear.ss.boot
> ### Title: Find Sample Size for a Linear RMST Model via Simulation
> ### Aliases: linear.ss.boot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D pilot_df_effect <- data.frame(
> ##D   time = c(rexp(50, 0.1), rexp(50, 0.05)), # Effect present
> ##D   status = rbinom(100, 1, 0.8),
> ##D   arm = rep(0:1, each = 50)
> ##D )
> ##D ss_results <- linear.ss.boot(
> ##D   pilot_data = pilot_df_effect,
> ##D   time_var = "time",
> ##D   status_var = "status",
> ##D   arm_var = "arm",
> ##D   target_power = 0.80,
> ##D   L = 10,
> ##D   n_sim = 200, # Low n_sim for example
> ##D   patience = 2,
> ##D   n_start = 100,
> ##D   n_step = 50,
> ##D   max_n_per_arm = 500
> ##D )
> ##D print(ss_results$results_data)
> ##D print(ss_results$results_plot)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("linear.ss.boot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("run_app")
> ### * run_app
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: run_app
> ### Title: Launch the RMSTdesign Shiny Application
> ### Aliases: run_app
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   RMSTSS::run_app()
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("run_app", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.42 0.46 2.87 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
